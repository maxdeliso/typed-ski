type Nat = ∀X . (X → X) → X → X

poly zero  = ΛX . λs : X → X . λz : X . z
poly succ  = λn : Nat .
               Λa . λs : a → a . λz : a .
                 s (n[a] s z)

poly one   = succ zero
poly two   = succ one
poly three = succ two

poly pair = ΛA . ΛB .
              λa : A . λb : B .
              ΛY . λk : A → B → Y .
                k a b

poly fst = ΛA . ΛB .
             λp : ∀Y . (A → B → Y) → Y .
               p [A] (λx : A . λy : B . x)

poly snd = ΛA . ΛB .
             λp : ∀Y . (A → B → Y) → Y .
               p [B] (λx : A . λy : B . y)

poly pred = λn : Nat .
  fst Nat Nat
    ( n [∀Y . (Nat → Nat → Y) → Y]
      ( λp : ∀Y . (Nat → Nat → Y) → Y .
          pair Nat Nat
            (snd Nat Nat p)
            (succ (snd Nat Nat p))
      )
      (pair Nat Nat zero zero)
    )

poly testPred1 = pred one
poly testPred3 = pred three
poly testPair = pair Nat Nat two three
poly testFst  = fst Nat Nat testPair
poly testSnd  = snd Nat Nat testPair
poly main = succ (pred three)
